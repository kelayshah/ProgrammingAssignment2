## This function first creates a matrix object that caches its inverse through makeCacheMatrix and
## computes the inverse of that matrix returned by makeCacheMatrix

## This function sets the matrix, gets the matrix, sets the inverse of the matrix and gets it.

makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL;
    set <- function(y) {
      x <<- y
      inv <<- NULL
    }
    get <- function() x
    setinverse <- function(solve) inv <<- solve
    getinverse <- function() inv
    list(set = set, get = get,
         setinverse = setinverse,
         getinverse = getinverse)
}


## This function computes the inverse of the matrix returned by makeCacheMatrix.
## It first checks if the inverse has already been calculated and if so, retrieves it.
## If not, then calculates the inverse and stores it in the cache.

cacheSolve <- function(x, ...) {
    inv <- x$getinverse()
    if(!is.null(inv)) {
      message("getting cached data")
      return(inv)
    }
    data <- x$get()
    inv <- solve(data, ...)
    x$setinverse(inv)
    inv                               ## Return a matrix that is the inverse of 'x'
}
